---
import Layout from '../../layouts/Layout.astro';
import { readFile } from 'fs/promises';
import path from 'path';

const returnUrl = Astro.url.searchParams.get('returnUrl') || '/products/product';

let attributes = [];
try {
  const filePath = path.join(process.cwd(), 'src', 'data', 'attributes.json');
  const fileContent = await readFile(filePath, 'utf-8');
  attributes = JSON.parse(fileContent);
} catch (error) {
  console.error('Error reading attributes.json:', error);
}
---

<Layout title="Select Attributes">
  <main>
    <div class="header">
      <h1>Select Attributes</h1>
    </div>
    <div class="search-container">
      <div class="search-bar">
        <span class="material-icons">search</span>
        <input type="text" id="attributeSearchInput" placeholder="Search attributes" class="search-input">
      </div>
    </div>
    <div class="attribute-list">
      {attributes.map((attributeGroup: { name: string; attributes: string[] }) => (
        <div class="attribute-group">
          <div class="attribute-header">
            <span class="attribute-name">{attributeGroup.name}</span>
            <span class="material-icons expand-icon">expand_more</span>
          </div>
          <div class="sub-attribute-list">
            {attributeGroup.attributes.map((attribute: string) => (
              <div class="sub-attribute-item">
                <label class="tick-container">
                  <input type="checkbox" value={attribute} data-group={attributeGroup.name}>
                  <span class="tick-icon material-icons">check</span>
                  {attribute}
                </label>
              </div>
            ))}
          </div>
        </div>
      ))}
    </div>
    <div class="footer">
      <button id="doneButton" class="done-button">Done</button>
    </div>
  </main>
</Layout>

<style>
  main {
    max-width: 600px;
    margin: 0 auto;
    padding: 1rem;
  }

  .header {
    display: flex;
    align-items: center;
    margin-bottom: 1rem;
  }

  h1 {
    font-size: 1.5rem;
    font-weight: bold;
  }

  .search-container {
    margin-bottom: 1rem;
  }

  .search-bar {
    display: flex;
    align-items: center;
    background-color: #f5f5f5;
    border-radius: 8px;
    padding: 0.5rem 1rem;
  }

  .search-input {
    border: none;
    background: transparent;
    font-size: 1rem;
    width: 100%;
    margin-left: 0.5rem;
    outline: none;
  }

  .attribute-list {
    background-color: white;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .attribute-group {
    border-bottom: 1px solid #f0f0f0;
  }

  .attribute-group:last-child {
    border-bottom: none;
  }

  .attribute-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    cursor: pointer;
  }

  .attribute-name {
    font-weight: 500;
  }

  .expand-icon {
    transition: transform 0.3s ease;
  }

  .sub-attribute-list {
    padding-left: 1rem;
  }

  .sub-attribute-item {
    padding: 0.75rem 1rem;
    border-top: 1px solid #f0f0f0;
  }

  .tick-container {
    display: flex;
    align-items: center;
    cursor: pointer;
  }

  .tick-container input {
    position: absolute;
    opacity: 0;
    cursor: pointer;
  }

  .tick-icon {
    color: #9e9e9e; /* Grey color for the tick icon */
    margin-right: 10px;
    font-size: 20px;
    visibility: hidden;
  }

  .tick-container input:checked ~ .tick-icon {
    visibility: visible;
  }

  .footer {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 1rem;
    background-color: white;
    box-shadow: 0 -1px 3px rgba(0, 0, 0, 0.1);
    display: flex;
    justify-content: flex-end;
  }

  .done-button {
    background-color: #2196F3;
    color: white;
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 4px;
    font-size: 1rem;
    cursor: pointer;
  }

  .done-button:hover {
    background-color: #1976D2;
  }
</style>

<script define:vars={{ returnUrl }}>
  document.addEventListener('DOMContentLoaded', () => {
    const attributeList = document.querySelector('.attribute-list');
    const attributeSearchInput = document.getElementById('attributeSearchInput');
    const doneButton = document.getElementById('doneButton');

    function filterAttributes(searchTerm) {
      const groups = attributeList.querySelectorAll('.attribute-group');
      groups.forEach((group) => {
        const groupName = group.querySelector('.attribute-name').textContent.toLowerCase();
        const subAttributes = group.querySelectorAll('.sub-attribute-item');
        let hasVisibleSubAttribute = false;

        subAttributes.forEach((subItem) => {
          const subName = subItem.textContent.toLowerCase();
          const showSubItem = subName.includes(searchTerm.toLowerCase());
          subItem.style.display = showSubItem ? 'block' : 'none';
          if (showSubItem) hasVisibleSubAttribute = true;
        });

        group.style.display = groupName.includes(searchTerm.toLowerCase()) || hasVisibleSubAttribute ? 'block' : 'none';
      });
    }

    attributeSearchInput.addEventListener('input', (e) => {
      filterAttributes(e.target.value.trim());
    });

    attributeList.addEventListener('click', (e) => {
      const header = e.target.closest('.attribute-header');
      if (header) {
        const group = header.closest('.attribute-group');
        const subList = group.querySelector('.sub-attribute-list');
        const expandIcon = header.querySelector('.expand-icon');
        
        subList.style.display = subList.style.display === 'none' ? 'block' : 'none';
        expandIcon.style.transform = subList.style.display === 'none' ? 'rotate(0deg)' : 'rotate(180deg)';
      }
    });

    doneButton.addEventListener('click', () => {
      const selectedAttributes = {};
      document.querySelectorAll('input[type="checkbox"]:checked').forEach(checkbox => {
        const group = checkbox.dataset.group;
        const value = checkbox.value;
        if (!selectedAttributes[group]) {
          selectedAttributes[group] = [];
        }
        selectedAttributes[group].push(value);
      });

      const updatedReturnUrl = new URL(returnUrl, window.location.origin);
      updatedReturnUrl.searchParams.set('selectedAttributes', JSON.stringify(selectedAttributes));

      window.location.href = updatedReturnUrl.toString();
    });
  });
</script>