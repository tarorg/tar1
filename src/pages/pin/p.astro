---
import categories from './cat.json';
import attributes from './at.json';
import '../../styles/global.css';
---

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Core Database</title>
</head>
<body class="bg-white text-gray-900 font-sans">
    <div class="max-w-4xl mx-auto p-4">
        <div class="bg-white rounded-md p-3 mb-4 flex items-center justify-between shadow-sm">
            <h1 id="pageTitle" class="text-2xl font-bold text-left">Product name</h1>
            <div class="flex space-x-3">
                <svg id="editIcon" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600 cursor-pointer hover:text-gray-800" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                </svg>
                <svg id="notesIcon" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-600 cursor-pointer hover:text-gray-800" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
            </div>
        </div>
        <div id="corebox" class="bg-white rounded-lg shadow-sm overflow-hidden hidden">
            <table id="coreTable" class="w-full">
                <tbody>
                    <tr class="border-b border-gray-200">
                        <td class="py-2 px-4 font-medium border-r border-gray-200">Name</td>
                        <td class="py-2 px-4" contenteditable="true" data-max-length="50" id="nameField"></td>
                    </tr>
                    <tr class="border-b border-gray-200">
                        <td class="py-2 px-4 font-medium border-r border-gray-200">Category</td>
                        <td class="py-2 px-4 category-wrapper">
                            <input type="text" class="w-full focus:outline-none bg-transparent" placeholder="Select a category">
                            <div class="category-dropdown hidden absolute bg-white shadow-md rounded-md mt-1 max-h-48 overflow-y-auto">
                                {categories.categories.map((category) => (
                                    <div class="py-2 px-4 hover:bg-gray-100 cursor-pointer" data-value={category}>{category}</div>
                                ))}
                            </div>
                        </td>
                    </tr>
                    <tr class="border-b border-gray-200">
                        <td class="py-2 px-4 font-medium border-r border-gray-200">Medias</td>
                        <td class="py-2 px-4 media-cell cursor-pointer transition-colors duration-200">
                            <input type="file" id="mediaInput" multiple accept="image/*,.pdf,.doc,.docx,.xls,.xlsx" class="hidden">
                            <div class="media-preview flex flex-wrap gap-2"></div>
                        </td>
                    </tr>
                    <tr class="border-b border-gray-200">
                        <td class="py-2 px-4 font-medium border-r border-gray-200">Instance</td>
                        <td class="py-2 px-4 cursor-pointer" id="typeSelectorCell">
                            <div id="typeSelector" class="inline-block">Item</div>
                        </td>
                    </tr>
                    <tr class="border-b border-gray-200">
                        <td class="py-2 px-4 font-medium border-r border-gray-200">Options</td>
                        <td class="py-2 px-4 cursor-pointer relative" id="optionsSelectorCell">
                            <div class="absolute inset-0 flex">
                                <div class="w-1/2 h-full" id="optionsDecrease"></div>
                                <div class="w-1/2 h-full" id="optionsIncrease"></div>
                            </div>
                            <div id="optionsSelector" class="text-center">1</div>
                        </td>
                    </tr>
                    <!-- 5 Option rows -->
                    {[...Array(5)].map((_, index) => (
                        <tr class="border-b border-gray-200 option-row" style="display: none;">
                            <td class="py-2 px-4 font-medium border-r border-gray-200 type-wrapper">
                                <input type="text" class="w-full focus:outline-none bg-transparent type-input" placeholder="Type">
                                <div class="type-dropdown hidden absolute bg-white shadow-md rounded-md mt-1 max-h-48 overflow-y-auto z-10">
                                    {attributes.attributes.map((attr) => (
                                        <div class="py-2 px-4 hover:bg-gray-100 cursor-pointer" data-value={attr.Type}>{attr.Type}</div>
                                    ))}
                                </div>
                            </td>
                            <td class="py-2 px-4">
                                <input type="text" class="w-full focus:outline-none bg-transparent type-value-input" readonly>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
        <div id="notesContainer" class="bg-white rounded-lg shadow-sm overflow-hidden p-4 hidden">
            <div id="editorjs"></div>
        </div>
    </div>

    <!-- Bottom Sheet -->
    <div id="bottomSheet" class="fixed inset-x-0 bottom-0 bg-white shadow-md rounded-t-xl transform translate-y-full transition-transform duration-300 ease-in-out z-50">
        <div class="p-4">
            <div class="flex items-center justify-between mb-4">
                <input type="text" id="bottomSheetSearch" class="w-full mr-4 p-2 border rounded-md" placeholder="Search values...">
                <button id="closeBottomSheet" class="text-gray-500 hover:text-gray-700 focus:outline-none">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            <div id="bottomSheetContent" class="max-h-64 overflow-y-auto">
                <!-- Values will be populated here -->
            </div>
        </div>
    </div>

    <!-- Add this HTML for the confirmation dialog just before the closing </body> tag -->
    <div id="confirmationDialog" class="fixed inset-x-0 bottom-0 bg-white shadow-md rounded-t-xl transform translate-y-full transition-transform duration-300 ease-in-out z-50">
        <div class="p-4">
            <p class="text-lg font-semibold mb-4">Are you sure you want to decrease the number of options?</p>
            <div class="flex justify-end space-x-4">
                <button id="cancelDecrease" class="px-4 py-2 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300 transition-colors">Cancel</button>
                <button id="confirmDecrease" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors">Confirm</button>
            </div>
        </div>
    </div>

    <!-- Add Editor.js and its plugins -->
    <script src="https://cdn.jsdelivr.net/npm/@editorjs/editorjs@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@editorjs/header@latest"></script>
    <script src="https://cdn.jsdelivr.net/npm/@editorjs/list@latest"></script>

    <script define:vars={{ attributes }}>
        function setupDropdown(inputSelector, dropdownSelector, optionsSelector) {
            const inputs = document.querySelectorAll(inputSelector);
            const selectedAttributes = new Set();

            inputs.forEach((input, index) => {
                const dropdown = input.nextElementSibling;
                const options = dropdown.querySelectorAll(optionsSelector);
                const wrapper = input.closest('.category-wrapper, .type-wrapper');

                input.addEventListener('focus', () => {
                    updateDropdownOptions(dropdown, selectedAttributes);
                    dropdown.classList.remove('hidden');
                    dropdown.style.width = `${wrapper.offsetWidth}px`;
                    
                    // Position the dropdown
                    const rect = wrapper.getBoundingClientRect();
                    dropdown.style.top = `${rect.bottom}px`;
                    dropdown.style.left = `${rect.left}px`;
                });

                input.addEventListener('blur', () => {
                    setTimeout(() => {
                        dropdown.classList.add('hidden');
                    }, 200);
                });

                input.addEventListener('input', () => {
                    const filter = input.value.toLowerCase();
                    options.forEach((option) => {
                        const text = option.textContent.toLowerCase();
                        if (text.includes(filter) && !selectedAttributes.has(option.textContent)) {
                            option.style.display = 'block';
                        } else {
                            option.style.display = 'none';
                        }
                    });
                });

                options.forEach((option) => {
                    option.addEventListener('click', () => {
                        if (input.value) {
                            selectedAttributes.delete(input.value);
                        }
                        input.value = option.textContent;
                        selectedAttributes.add(option.textContent);
                        dropdown.classList.add('hidden');
                        
                        const typeValue = input.closest('tr').querySelector('.type-value-input');
                        if (typeValue) {
                            typeValue.placeholder = ''; // Remove the placeholder text
                        }

                        updateAllDropdowns();
                    });
                });
            });

            function updateDropdownOptions(dropdown, selectedAttributes) {
                const options = dropdown.querySelectorAll(optionsSelector);
                options.forEach((option) => {
                    if (selectedAttributes.has(option.textContent)) {
                        option.style.display = 'none';
                    } else {
                        option.style.display = 'block';
                    }
                });
            }

            function updateAllDropdowns() {
                inputs.forEach((input) => {
                    const dropdown = input.nextElementSibling;
                    updateDropdownOptions(dropdown, selectedAttributes);
                });
            }
        }

        // Setup Category dropdown
        setupDropdown('.category-wrapper input', '.category-dropdown', '.category-dropdown div');

        // Setup Type dropdown
        setupDropdown('.type-input', '.type-dropdown', '.type-dropdown div');

        const coreTable = document.getElementById('coreTable');

        // Name field character limit and page title update
        const nameCell = document.querySelector('[data-max-length]');
        const pageTitle = document.getElementById('pageTitle');
        if (nameCell) {
            nameCell.addEventListener('input', function() {
                const maxLength = parseInt(this.getAttribute('data-max-length') || '50');
                if (this.textContent && this.textContent.length > maxLength) {
                    this.textContent = this.textContent.slice(0, maxLength);
                }
                updatePageTitle(this.textContent);
            });
        }

        function updatePageTitle(name) {
            pageTitle.textContent = name || 'Product name';
        }

        // Logging changes for other fields
        document.querySelectorAll('td[contenteditable="true"]').forEach(cell => {
            cell.addEventListener('blur', function() {
                const previousSibling = this.previousElementSibling;
                if (previousSibling && previousSibling.textContent && this.textContent) {
                    console.log(`${previousSibling.textContent} updated to: ${this.textContent}`);
                }
                // Here you can add code to save the changes, e.g., send to a server
            });
        });

        // Media upload functionality
        const mediaCell = document.querySelector('.media-cell');
        const mediaInput = document.getElementById('mediaInput');
        const mediaPreview = document.querySelector('.media-preview');

        mediaCell.addEventListener('click', () => {
            mediaInput.click();
        });

        mediaCell.addEventListener('dragover', (e) => {
            e.preventDefault();
            mediaCell.classList.add('bg-gray-200');
        });

        mediaCell.addEventListener('dragleave', () => {
            mediaCell.classList.remove('bg-gray-200');
        });

        mediaCell.addEventListener('drop', (e) => {
            e.preventDefault();
            mediaCell.classList.remove('bg-gray-200');
            const files = e.dataTransfer.files;
            handleFiles(files);
        });

        mediaInput.addEventListener('change', (event) => {
            const files = event.target.files;
            handleFiles(files);
        });

        function handleFiles(files) {
            if (files) {
                for (let i = 0; i < files.length; i++) {
                    const file = files[i];
                    const reader = new FileReader();

                    reader.onload = (e) => {
                        const mediaItem = document.createElement('div');
                        mediaItem.className = 'media-item inline-flex items-center justify-center overflow-hidden';
                        mediaItem.style.width = '32px';
                        mediaItem.style.height = '32px';

                        if (file.type.startsWith('image/')) {
                            const img = document.createElement('img');
                            img.src = e.target.result;
                            img.alt = file.name;
                            img.className = 'w-full h-full object-cover';
                            mediaItem.appendChild(img);
                        } else {
                            const icon = document.createElement('span');
                            icon.textContent = getFileIcon(file.type);
                            icon.className = 'text-xl';
                            mediaItem.appendChild(icon);
                        }

                        mediaPreview.appendChild(mediaItem);
                    };

                    reader.readAsDataURL(file);
                }

                console.log(`Medias updated: ${files.length} file(s) added`);
                // Here you can add code to save the changes, e.g., send to a server
            }
        }

        function getFileIcon(fileType) {
            if (fileType.includes('pdf')) return '📄';
            if (fileType.includes('doc')) return '📝';
            if (fileType.includes('xls')) return '📊';
            return '📁'; // default icon for other file types
        }

        // Bottom Sheet functionality
        const bottomSheet = document.getElementById('bottomSheet');
        const bottomSheetContent = document.getElementById('bottomSheetContent');
        const bottomSheetSearch = document.getElementById('bottomSheetSearch');
        const typeInputs = document.querySelectorAll('.type-input');
        const typeValueInputs = document.querySelectorAll('.type-value-input');
        const typeSelector = document.getElementById('typeSelector');

        let currentValues = [];
        let selectedValues = new Map();
        let activeTypeValueInput = null;
        let activeTypeInput = null;

        typeValueInputs.forEach((typeValueInput, index) => {
            typeValueInput.addEventListener('click', () => {
                const typeInput = typeInputs[index];
                const selectedType = typeInput.value;
                const attribute = attributes.attributes.find(attr => attr.Type === selectedType);
                if (attribute) {
                    currentValues = attribute.values;
                    activeTypeValueInput = typeValueInput;
                    activeTypeInput = typeInput;
                    
                    // Initialize selected values for this attribute if not already set
                    if (!selectedValues.has(selectedType)) {
                        selectedValues.set(selectedType, new Set());
                    }
                    
                    populateBottomSheet(currentValues);
                    openBottomSheet();
                }
            });
        });

        function populateBottomSheet(values) {
            if (!activeTypeInput) return; // Add this check
            
            const isItemType = typeSelector.textContent === 'Item';
            const currentSelectedValues = selectedValues.get(activeTypeInput.value) || new Set();
            bottomSheetContent.innerHTML = values.map(value => 
                `<div class="py-2 px-4 hover:bg-gray-100 cursor-pointer bottom-sheet-item ${isItemType ? '' : (currentSelectedValues.has(value) ? 'bg-blue-100' : '')}">${value}</div>`
            ).join('');
        }

        function openBottomSheet() {
            bottomSheet.classList.remove('translate-y-full');
            bottomSheetSearch.value = '';
            bottomSheetSearch.focus();
        }

        function closeBottomSheet() {
            bottomSheet.classList.add('translate-y-full');
            if (activeTypeValueInput) {
                activeTypeValueInput.blur();
            }
        }

        bottomSheetSearch.addEventListener('input', (e) => {
            const searchTerm = e.target.value.toLowerCase();
            const filteredValues = currentValues.filter(value => 
                value.toLowerCase().includes(searchTerm)
            );
            populateBottomSheet(filteredValues);
        });

        bottomSheetContent.addEventListener('click', (e) => {
            if (e.target.classList.contains('bottom-sheet-item')) {
                const value = e.target.textContent;
                const isItemType = typeSelector.textContent === 'Item';
                const currentSelectedValues = selectedValues.get(activeTypeInput.value);

                if (isItemType) {
                    currentSelectedValues.clear();
                    currentSelectedValues.add(value);
                    updateTypeValueInput();
                    closeBottomSheet();
                } else {
                    if (currentSelectedValues.has(value)) {
                        currentSelectedValues.delete(value);
                        e.target.classList.remove('bg-blue-100');
                    } else {
                        currentSelectedValues.add(value);
                        e.target.classList.add('bg-blue-100');
                    }
                    updateTypeValueInput();
                }
            }
        });

        function updateTypeValueInput() {
            if (activeTypeValueInput && activeTypeInput) {
                const currentSelectedValues = selectedValues.get(activeTypeInput.value);
                activeTypeValueInput.value = Array.from(currentSelectedValues).join(', ');
            }
        }

        // Close bottom sheet when clicking outside
        document.addEventListener('click', (e) => {
            if (!bottomSheet.contains(e.target) && !e.target.classList.contains('type-value-input')) {
                closeBottomSheet();
            }
        });

        // Close bottom sheet with ESC key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                closeBottomSheet();
            }
        });

        // Type selector functionality
        typeSelector.addEventListener('click', () => {
            const instances = ['Item', 'Variants', 'Service'];
            const currentIndex = instances.indexOf(typeSelector.textContent);
            const nextIndex = (currentIndex + 1) % instances.length;
            typeSelector.textContent = instances[nextIndex];
            console.log(`Selected Instance: ${instances[nextIndex]}`);

            // Clear selected values when changing instance
            selectedValues.clear();
            typeValueInputs.forEach(input => input.value = '');
        });

        // Options selector functionality
        const optionsSelector = document.getElementById('optionsSelector');
        const optionsSelectorCell = document.getElementById('optionsSelectorCell');
        const optionsDecrease = document.getElementById('optionsDecrease');
        const optionsIncrease = document.getElementById('optionsIncrease');
        const optionsValues = [1, 2, 3, 4, 5];
        let currentOptionsIndex = 0;
        const optionRows = document.querySelectorAll('.option-row');

        // Confirmation dialog elements
        const confirmationDialog = document.getElementById('confirmationDialog');
        const cancelDecreaseBtn = document.getElementById('cancelDecrease');
        const confirmDecreaseBtn = document.getElementById('confirmDecrease');

        function updateOptionRowsVisibility(value) {
            optionRows.forEach((row, index) => {
                row.style.display = index < value ? 'table-row' : 'none';
            });
        }

        function updateOptionsValue(change) {
            const newIndex = Math.max(0, Math.min(currentOptionsIndex + change, optionsValues.length - 1));
            if (newIndex !== currentOptionsIndex) {
                currentOptionsIndex = newIndex;
                const selectedValue = optionsValues[currentOptionsIndex];
                optionsSelector.textContent = selectedValue;
                updateOptionRowsVisibility(selectedValue);
                console.log(`Selected Option: ${selectedValue}`);
                // Here you can add code to save the changes, e.g., send to a server
            }
        }

        function showConfirmationDialog() {
            confirmationDialog.classList.remove('translate-y-full');
        }

        function hideConfirmationDialog() {
            confirmationDialog.classList.add('translate-y-full');
        }

        optionsDecrease.addEventListener('click', (e) => {
            e.stopPropagation();
            if (currentOptionsIndex > 0) {
                showConfirmationDialog();
            }
        });

        optionsIncrease.addEventListener('click', (e) => {
            e.stopPropagation();
            updateOptionsValue(1);
        });

        cancelDecreaseBtn.addEventListener('click', () => {
            hideConfirmationDialog();
        });

        confirmDecreaseBtn.addEventListener('click', () => {
            updateOptionsValue(-1);
            hideConfirmationDialog();
        });

        // Initialize option rows visibility
        updateOptionRowsVisibility(1);

        const closeBottomSheetButton = document.getElementById('closeBottomSheet');

        closeBottomSheetButton.addEventListener('click', (e) => {
            e.stopPropagation(); // Prevent the click from propagating to the document
            closeBottomSheet();
        });

        // Add these new event listeners at the end of the script
        const editIcon = document.getElementById('editIcon');
        const notesIcon = document.getElementById('notesIcon');
        const corebox = document.getElementById('corebox');
        const notesContainer = document.getElementById('notesContainer');

        editIcon.addEventListener('click', () => {
            corebox.classList.toggle('hidden');
            notesContainer.classList.add('hidden');
        });

        notesIcon.addEventListener('click', () => {
            notesContainer.classList.toggle('hidden');
            corebox.classList.add('hidden');
            if (!notesContainer.classList.contains('hidden')) {
                initializeEditor();
            }
        });

        // Add these new variables and functions for Editor.js
        let editor;

        function initializeEditor() {
            if (editor) {
                editor.destroy();
            }

            editor = new EditorJS({
                holder: 'editorjs',
                tools: {
                    header: {
                        class: Header,
                        inlineToolbar: ['link']
                    },
                    list: {
                        class: List,
                        inlineToolbar: true
                    }
                },
                data: {}, // You can load saved data here
                placeholder: 'Enter your notes here...'
            });
        }

        // Add a function to save the editor content
        async function saveEditorContent() {
            if (editor) {
                try {
                    const savedData = await editor.save();
                    console.log('Notes saved:', savedData);
                    // Here you can add code to send the saved data to your server
                } catch (error) {
                    console.error('Saving failed: ', error);
                }
            }
        }

        // You might want to call saveEditorContent() periodically or when the user navigates away from the page
        window.addEventListener('beforeunload', saveEditorContent);

        // Add new script for the instances table
        document.addEventListener('DOMContentLoaded', () => {
            const instancesTable = document.getElementById('instancesTableBody');
            const optionRows = document.querySelectorAll('.option-row');
            const optionsSelector = document.getElementById('optionsSelector');
            
            function generateCombinations(options) {
                if (options.length === 0) return [[]];
                const firstOption = options[0];
                const restOptions = options.slice(1);
                const combinationsWithoutFirst = generateCombinations(restOptions);
                const combinations = [];
                for (const value of firstOption.values) {
                    for (const combination of combinationsWithoutFirst) {
                        combinations.push([value, ...combination]);
                    }
                }
                return combinations;
            }

            function updateInstancesTable() {
                if (!instancesTable) return;
                instancesTable.innerHTML = ''; // Clear existing rows

                const visibleOptionRows = Array.from(optionRows).slice(0, parseInt(optionsSelector.textContent));
                const options = visibleOptionRows
                    .map(row => {
                        const typeInput = row.querySelector('.type-input');
                        const valueInput = row.querySelector('.type-value-input');
                        if (typeInput && valueInput && typeInput.value && valueInput.value) {
                            return {
                                type: typeInput.value,
                                values: valueInput.value.split(',').map(v => v.trim()).filter(v => v)
                            };
                        }
                        return null;
                    })
                    .filter(option => option !== null);

                const combinations = generateCombinations(options);

                combinations.forEach((combination, index) => {
                    const newRow = document.createElement('tr');
                    const sku = `SKU-${index + 1}`;
                    const variant = combination.join(' - ');
                    newRow.innerHTML = `
                        <td class="px-6 py-4 whitespace-nowrap w-3/4 border-r border-gray-200">
                            <div class="flex flex-col">
                                <input type="text" class="w-full focus:outline-none font-medium" value="${sku}" readonly>
                                <input type="text" class="w-full focus:outline-none text-sm text-gray-500 mt-1" value="${variant}" readonly>
                            </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap w-1/4">
                            <input type="number" class="w-full focus:outline-none" value="0">
                        </td>
                    `;
                    instancesTable.appendChild(newRow);
                });
            }

            // Update instances table when option values change
            optionRows.forEach(row => {
                const valueInput = row.querySelector('.type-value-input');
                if (valueInput) {
                    valueInput.addEventListener('input', updateInstancesTable);
                }
            });

            // Update instances table when the number of options changes
            const optionsDecrease = document.getElementById('optionsDecrease');
            const optionsIncrease = document.getElementById('optionsIncrease');

            optionsDecrease.addEventListener('click', updateInstancesTable);
            optionsIncrease.addEventListener('click', updateInstancesTable);

            // Initial update
            updateInstancesTable();
        });
    </script>

    <style>
        .media-cell {
            min-height: 40px; /* Adjust as needed */
        }
        .media-preview {
            display: flex;
            flex-wrap: wrap;
            gap: 4px;
        }
        .media-item {
            width: 32px;
            height: 32px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            overflow: hidden;
            background-color: #f3f4f6; /* Light gray background for non-image files */
        }
        /* Remove the default focus outline for all cells */
        td:focus {
            outline: none;
        }
        /* Add a subtle background color change on hover for all rows */
        tr:hover td {
            background-color: #f9fafb;
        }
        /* Remove these styles as we're now using Tailwind classes */
        /*
        .type-select {
            appearance: none;
            -webkit-appearance: none;
            -moz-appearance: none;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='%23a0aec0'%3E%3Cpath d='M7 10l5 5 5-5z'/%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-position: right 0.5rem center;
            background-size: 1.5em 1.5em;
            padding-right: 2.5rem;
        }
        .type-wrapper::after {
            content: none;
        }
        */
        .type-select {
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
            background-image: none;
        }

        .type-select::-ms-expand {
            display: none;
        }

        /* Hide the arrow in WebKit browsers */
        .type-select::-webkit-select-placeholder {
            color: transparent;
        }

        /* Hide the arrow in Firefox */
        .type-select:-moz-focusring {
            color: transparent;
            text-shadow: 0 0 0 #000;
        }

        /* Style for the placeholder option */
        .type-select option[value=""] {
            color: #9CA3AF;
        }

        /* Style for other options */
        .type-select option:not([value=""]) {
            color: #374151;
        }

        /* Add these new styles */
        .category-wrapper,
        .type-wrapper {
            position: relative;
        }

        .category-dropdown,
        .type-dropdown {
            position: fixed;
            width: 100%;
            left: 0;
            z-index: 1000;
        }

        /* Bottom Sheet Styles */
        #bottomSheet {
            max-height: 80vh;
        }

        .bottom-sheet-item {
            transition: background-color 0.2s;
        }

        .bottom-sheet-item:active {
            background-color: #e5e7eb;
        }

        .bottom-sheet-item.selected {
            background-color: #93c5fd;
        }

        #typeSelector {
            transition: none; /* Remove the transition */
        }

        #typeSelectorCell:hover #typeSelector {
            color: inherit; /* Use the default text color on hover */
        }

        /* Remove this style if it exists */
        /*
        #typeSelector {
            border: 1px solid #e5e7eb;
            padding: 0.25rem 0.75rem;
            border-radius: 0.375rem;
        }
        */

        #optionsSelector {
            transition: none;
        }

        #optionsSelectorCell:hover #optionsSelector {
            color: inherit;
        }

        #closeBottomSheet {
            transition: color 0.2s;
        }

        #closeBottomSheet:hover {
            color: #4B5563; /* A slightly darker gray on hover */
        }

        #bottomSheetSearch {
            flex-grow: 1;
            min-width: 0; /* This allows the input to shrink if needed */
        }

        #closeBottomSheet {
            flex-shrink: 0;
        }

        #optionsSelectorCell {
            user-select: none; /* Prevent text selection */
        }

        #optionsDecrease, #optionsIncrease {
            cursor: pointer;
        }

        #optionsSelector {
            pointer-events: none; /* Allows clicks to pass through to the underlying divs */
        }

        /* Hide table header */
        #coreTable thead {
            display: none;
        }

        /* Style for the page title */
        #pageTitle {
            transition: opacity 0.3s ease;
        }

        #confirmationDialog {
            max-height: 80vh;
        }

        /* Add this new style for the property column */
        #coreTable td:first-child {
            width: 25%;
        }

        /* You can add specific styles for the corebox if needed */
        #corebox {
            /* Add any additional styles for the corebox container here */
        }

        /* Add styles for the icons */
        .bg-gray-100 svg {
            transition: color 0.2s ease-in-out;
        }

        /* Add these new styles */
        #editIcon, #notesIcon {
            transition: color 0.2s ease-in-out;
        }

        #corebox, #notesContainer {
            transition: opacity 0.3s ease-in-out;
        }

        /* Add or modify these styles */
        #notesContainer {
            height: calc(100vh - 120px); /* Adjust this value as needed */
        }

        #notesTextarea {
            border: none;
            background-color: transparent;
        }

        /* Add these new styles for Editor.js */
        #editorjs {
            height: 100%;
        }

        .codex-editor__redactor {
            padding-bottom: 100px !important;
        }

        /* Add these new styles for the corebox */
        #corebox {
            width: 100%;
            margin-left: 0;
            margin-right: 0;
            background-color: white;
        }

        #coreTable {
            width: 100%;
        }

        #coreTable td {
            padding-left: 1rem;
            padding-right: 1rem;
        }

        body {
            background-color: white;
        }

        #corebox, #notesContainer {
            width: 100%;
            background-color: white;
            margin-top: 1rem;
        }

        #coreTable {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
        }

        #coreTable td {
            padding: 0.75rem 1rem;
            border-bottom: 1px solid #e5e7eb;
        }

        #coreTable tr:last-child td {
            border-bottom: none;
        }
    </style>

    <!-- Add the new Notion-like table here -->
    <div class="mt-8 max-w-4xl mx-auto p-4">
        <div class="bg-white rounded-lg shadow-sm overflow-hidden">
            <table class="w-full">
                <thead>
                    <tr class="bg-gray-50">
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-3/4 border-r border-gray-200">SKU</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/4">QTY</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200" id="instancesTableBody">
                    <!-- Rows will be added dynamically -->
                </tbody>
            </table>
        </div>
    </div>

    <style>
        /* ... (previous styles remain unchanged) */

        /* Add these new styles for the instances table */
        #instancesTableBody td {
            vertical-align: top;
        }

        #instancesTableBody input[type="text"],
        #instancesTableBody input[type="number"] {
            background-color: transparent;
        }

        #instancesTableBody input[type="text"]::placeholder {
            color: #9CA3AF;
        }

        /* Ensure the table respects the column widths */
        #instancesTableBody table {
            table-layout: fixed;
        }

        #instancesTableBody th,
        #instancesTableBody td {
            overflow: hidden;
            text-overflow: ellipsis;
        }

        /* Add a vertical divider between columns */
        #instancesTableBody th:first-child,
        #instancesTableBody td:first-child {
            border-right: 1px solid #e5e7eb;
        }
    </style>
</body>
</html>